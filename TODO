SAFETY:
- check for memoryleaks?

REFACTOR/FIX:
- let and let* args should be in a list like in Scheme
- load does not care where the file is, it always takes absolute path

TESTS:
- extend testlist to cover new primitive procedures and errors

IMPLEMENT:
- arithmetic functions do not do typechecks, ill formed expressions could fall down there
- / with 1 arg should do (/ 1 arg)

STANDARD LIBRARY:
- add an MCE (this maybe requires some primitives that arent implemented yet)
    - typed scheme
- add an error macro that prints to the screen and returns err

GOOD TO HAVE:
- foreign function interface
- add random exit messages like in mit-scheme

NOTES:
- non-local jumps are used for error handling, right now if something fails in (load filename) the file wont get closed

TYPES:
- built in or in an mce?
- refactor error handling, and atleast tell which file and line the problem arose, idk how messy it will get with macros

(: fib (number_t -> number_t))
(define (fib n)
  (cond ((= 0 n) 1)
        ((= 1 n) 1)
        (else (+ (fib (- n 1)) (fib (- n 2)))))) ; there is no [else] in [cond] rn and it would look better with a [ branch ]


OPTIMIOZATIONN:
- maybe if i use -O2 recursive calls will be replaced by jumps!

- fix `values`
- implement variadic lambda