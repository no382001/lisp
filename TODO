before writing a vm, address [blocker]s and it would be ideal if [feature]s were done

SAFETY:
- check for memoryleaks?
[out] - implement trampolining to escape the blown callstack in an infinite loop
[out] - implement a ringbuffer stack so it can run forever (see RingLisp, this will bring its own challenges) 

REFACTOR/FIX:
- do something with the non-local jumps, they fuck up loading (is this still relevant? try to remove eval form the inside of load)
[feature] - let and let* args should be in a list like in Scheme
[blocker] - refactor define
    - to implement overwriting (same as the setq impl?) or impl undef and make assoc search from the top of the stack, to emulate some push pop
- load does not care where the file is, it always takes absolute path to the binary

TESTS:
- extend testlist to cover new primitive procedures and errors

IMPLEMENT:
[feature] - arithmetic functions do not do typechecks, ill formed expressions could fall down there
- / with 1 arg should do (/ 1 arg)
[feature] - add quasiquote
[feature] - strings would be okay to have, even tho only display would profit from it directly

STANDARD LIBRARY:
- include macro could be improved
- add an MCE (this maybe requires some primitives that arent implemented yet)
    - typed scheme
- add an error macro that prints to the screen and returns err

GOOD TO HAVE:
- foreign function interface
- add random exit messages like in mit-scheme
