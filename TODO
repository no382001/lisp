SAFETY:
- check for memoryleaks?
- implement trampolining to escape the blown callstack in an infinite loop
- implement a ringbuffer stack so it can run forever (see RingLisp, this will bring its own challenges) 

REFACTOR/FIX:
- do something with the non-local jumps, they fuck up loading
- let and let* args should be in a list to like in Scheme
- refactor define
    - to implement overwriting (same as the setq impl?)
- load does not care where the file is, it always takes absolute path to the binary
- #t cant be parsed for some reason
- trace or stepping breaks input and falls into inf () when include macro ends

TESTS:
- fix tests (all of them fail since i dont use stdin)
- extend testlist to cover new primitive procedures and errors

IMPLEMENT:
- arithmetic functions do not do typechecks, ill formed expressions could fall down there
- / with 1 arg should do (/ 1 arg)
- add all functions from the tinylisp doc
    - implement set! setcar! setcdr! from docs
    - read
- add quasiquote
- strings would be okay to have, even tho only display would profit from it directly

STANDARD LIBRARY:
- include macro could be improved
- add an MCE (this maybe requires some primitives that arent implemented yet, and a different gc and evaluation strategy)
    - typed scheme

GOOD TO HAVE:
- foreign function interface
- add random exit messages like in mit-scheme
