REFACTOR/FIX:
- get rid of NaN boxing
- let and let* args should be in a list like in Scheme

TESTS:
- extend testlist to cover new primitive procedures and errors

IMPLEMENT:
- arithmetic functions do not do typechecks, ill formed expressions could fall down there
- / with 1 arg should do (/ 1 arg)

STANDARD LIBRARY:
- add an MCE (this maybe requires some primitives that arent implemented yet)
    - typed scheme

GOOD TO HAVE:
- add random exit messages like in mit-scheme

- error handling is very messy

(: fib (number_t -> number_t))
(define (fib n)
  (cond ((= 0 n) 1)
        ((= 1 n) 1)
        (else (+ (fib (- n 1)) (fib (- n 2)))))) ; there is no [else] in [cond] rn and it would look better with a [ branch ]


OPTIMIOZATIONN:
- maybe if i use -O2 recursive calls will be replaced by jumps!

- fix `values`
- implement variadic lambda

- typeconversion functions

- mod2pi works fine, but sin breaks on large numbers, float32 overflow?
- im not sure if repl ever exits on an open file

(__time (factorial 150))
10098>1.128371

- i think its fast enough to do real time audio
- make it into a library